public void swapEt(int data, int position) {
		Node node = new Node(); //yeni node
		node.data = item;
		node.nextNode = null;
 
		if(isEmpty()) { //eğer boşsa atla isempty booelan  
			return;
		} else if(this.head == null && position == 0) { 
			this.head = node;
		}
 
		if(position == 0) {
			node.nextNode = this.head;
			this.head = node;
		}
 
		Node current = this.head;
		Node previous = null;
		int i = 0;
 
		while(i < position) { // swaplanmak istenen pozisyona kadar loop et
			previous = current;
			current = current.nextNode;
			if(current == null)
				break;
			i++;
		}
 
		node.nextNode = current; /aradaki bağlantı
		previous.nextNode = node; //loopu kur
    
   
   	public void yazdır() {
		if (this.head == null) {
			return;
		}
		//print all nodes
		Node tempNode = this.head;
		while (tempNode != null) {
			System.out.print(tempNode.data + "  ");
			tempNode = tempNode.nextNode;
		}
	}

public class LinkedList {
	private Node first;
	private Node last;

	public LinkedList() {
		first = null;
		last = null;
	}

	public boolean isEmpty() {
		return (first == null);
	}

	public void insertAtFront(int itemName) {
		if(isEmpty()){
			//List is empty
			first = last = new Node(itemName);
		}else{
			first = new Node(itemName, first);
		}
	}

	public boolean removeFromFront() {
		if(isEmpty()){
			System.out.println("List is empty, you can not remove an element..");
			return false;
		}else{
			if(first == last){
				//List has one element
				first = last = null;
			}else{
				first = first.getLink();
			}
			return true;
		}
	}

	public void insertAtBack(int itemName) {
		if(isEmpty()){
			//List is empty
			first = last = new Node(itemName);
		}else{			
			last.setLink(new Node(itemName));
		}
	}

	public boolean removeFromBack() {
		if(isEmpty()){
			System.out.println("List is empty, you can not remove an element..");
			return false;
		}else{
			if(first == last){
				//List has one element
				first = last = null;
			}else{
				Node current = first;
				while(current.getLink() != last){
					current = current.getLink();
				}
				current.setLink(null);
				last = current;
			}
			return true;
		}
	}

	public int size() {
		int count = 0;
		Node current = first;
		while (current != null) {
			count++;
			current = current.getLink();
		}
		return count;
	}

	public void outputList() {
		Node current = first;
		while (current != null) {
			System.out.println(current.getItem());
			current = current.getLink();
			
		}
	}

	private Node find(int target) {
		Node position = first;
		int itemAtPosition;
		while (position != null) {
			itemAtPosition = position.getItem();
			if (itemAtPosition == target)
				return position;
			position = position.getLink();
		}
		return null; // target was not found
	}

	public boolean contains(int item) {
		return (find(item) != null);
	}

	public void Insertion(int value) {		
		Node newNode = new Node(value);		
		if(first == null){
			first = newNode;
		}else{
			Node current = first;
			while(current.getLink() != null){
				current = current.link;
			}
			current.link = newNode;
		}	
	}

	
	public static void main(String[] args) {
		LinkedList list = new LinkedList();
		
		list.insertAtFront(5);
		list.insertAtBack(10);
		list.insertAtFront(0);
		
		list.outputList();
		
		if(list.removeFromFront())
			System.out.println("SEN2211");
		else
			System.out.println("SEN1001");
		
		list.outputList();
	
	}
}




